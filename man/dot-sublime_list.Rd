% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/functions.R
\name{.sublime_list}
\alias{.sublime_list}
\title{Internal functions}
\usage{
.sublime_list(x, conjunction = "and")
}
\arguments{
\item{x}{A \code{character} vector to be listed.}

\item{conjunction}{A \code{character} text to be used in output text.}
}
\value{
A \code{character} text.
}
\description{
List a human readable list of elements.
}
\details{
#' @title Internal functions
#'
#' @description Open a brick file using \code{raster} package. If \code{file} is a url, it uses
#' GDAL driver \code{vsicurl}.
#'
#' @param file   A \code{character} text indicating a file path (local or in the web) to be opened.
#'
#' @return A \code{RasterBrick} object.
#'
.raster.open <- function(file) {

if (grepl("^https?://.+", file)) {

file = paste0("/vsicurl/", file)
    }

raster <- tryCatch(raster::brick(file, values = FALSE), error = function(e) NULL)

if (is.null(raster)) {

stop(sprintf("Error while opening raster '%s'.\nFile is unreachable.", file))
    }

return(brick)
}

#' @title Internal functions
#'
#' @description Test if all files in a bricks \code{data.frame} are reachable.
#' A progress bar will be showed if the number of files in bricks is greater or equal
#' the value of \code{getOption("progress_bar", 10)}.
#'
#' @param files   A bricks \code{data.frame}.
#'
#' @return \code{TRUE} if all bricks are reachable.
#'
.raster.touch <- function(files) {

progress_bar <- length(files) >= getOption(.progress_bar_option, 10)

if (progress_bar) {

pb <- utils::txtProgressBar(min = 0, max = length(files), style = 3)
    }

for (file in files) {

.raster.open(file)

if (progress_bar) {
            utils::setTxtProgressBar(pb = pb, value = utils::getTxtProgressBar(pb) + 1)
        }
    }

if (progress_bar) {
        close(pb)
    }

return(TRUE)
}
#' @title Internal functions
#'
#' @name .is_empty
#'
#' @description Checks if a value is empty. The meaning of empty state depends on \code{x} class.
#' If \code{x} is a \code{data.frame}, the object is empty if it has zero columns or zero rows.
#' If \code{x} is a \code{character} vector, it is empty if \code{x} has length zero, has at least one \code{NA},
#' or \code{""} value. If \code{x} is a \code{numeric} vector, it is empty if it has length zero or has
#' at least one \code{NA} as its element. If \code{x} is a \code{list}, it is empty if it has length zero.
#' Otherwise, it is empty if it is \code{NULL} or has length zero.
#'
#' @param x   Any object to be tested.
#'
#' @return \code{TRUE} if \code{x} is empty. \code{FALSE} otherwise.
#'
.is_empty <- function(x) {
    UseMethod(".is_empty", x)
}

#' @title Internal functions
#'
#' @name .is_empty.default
#'
#' @param x   Any object to be tested.
#'
#' @return \code{TRUE} if \code{x} is \code{NULL}. \code{FALSE} otherwise.
#'
.is_empty.default <- function(x) {
    is.null(x) || length(x) == 0
}

#' @title Internal functions
#'
#' @name .is_empty.data.frame
#'
#' @param x   A \code{data.frame} object to be tested.
#'
#' @return \code{TRUE} if \code{data.frame} has zero columns or zero rows. \code{FALSE} otherwise.
#'
.is_empty.data.frame <- function(x) {
    length(x) == 0 || nrow(x) == 0
}

#' @title Internal functions
#'
#' @name .is_empty.character
#'
#' @param x   A \code{character} vector to be tested.
#'
#' @return \code{TRUE} if \code{x} has length zero, has at least one \code{NA}, or \code{""} value. \code{FALSE} otherwise.
#'
.is_empty.character <- function(x) {
    length(x) == 0 || any(is.na(x)) || any(trimws(x) == "")
}

#' @title Internal functions
#'
#' @name .is_empty.numeric
#'
#' @param x   A \code{numeric} vector to be tested.
#'
#' @return \code{TRUE} if \code{x} has length zero or has at least one \code{NA}. \code{FALSE} otherwise.
#'
.is_empty.numeric <- function(x) {
    length(x) == 0 || any(is.na(x))
}

#' @title Internal functions
#'
#' @name .is_empty.list
#'
#' @param x   A \code{list} to be tested.
#'
#' @return \code{TRUE} if \code{x} has length zero. \code{FALSE} otherwise.
#'
.is_empty.list <- function(x) {
    length(x) == 0
}
}
