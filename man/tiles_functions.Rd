% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cubes.R
\name{tiles_functions}
\alias{tiles_functions}
\alias{filter_tiles}
\alias{fetch_tiles}
\alias{list_tiles}
\alias{tiles_to_sfc}
\title{Tiles functions}
\usage{
filter_tiles(cube, prefix = NULL, geom = NULL)

fetch_tiles(cube)

list_tiles(cube, prefix = NULL)

tiles_to_sfc(tiles)
}
\arguments{
\item{cube}{A \code{EOCubes_cube} object.}

\item{prefix}{A \code{character} vector containing tile name prefix to be
filtered.}

\item{geom}{A \code{sfc}, a \code{sf} object, or a \code{character}
path to a shapefile to filter intersecting tiles.}

\item{tiles}{A \code{EOCubes_tilelist} object.}
}
\value{
An \code{EOCubes_cube} object.

An \code{EOCubes_fetched, EOCubes_cube} object.

An \code{EOCubes_tilelist} object or \code{NULL} if no tile
satisfies the filter criteria

A \code{sfc} object.
}
\description{
These functions provide operations to work with tiles
registered in cubes.
}
\details{
The function \code{filter_tiles} requires \code{sf} package.

Fetching tiles can be an expensive task. You can filter tiles that intersects
your studing area before the fetching procedure using \code{filter_tiles}
function.

The function \code{tiles_to_sfc} requires \code{sf} package.
}
\section{Functions}{
\itemize{
\item \code{filter_tiles}: Returns a \code{EOCubes_cube} with tiles that
intersects the \code{geom} object.

\item \code{fetch_tiles}: Fetches all registered tiles in a cube.

\item \code{list_tiles}: Lists all registered tiles in a cube.

\item \code{tiles_to_sfc}: Converts tiles extents to a \code{sfc} object.
}}

\examples{
x <- remote("localhost")
cub1 <- cube("MOD13Q1/006", x)
y <- list_tiles(cub1, "h13v10") # select 'h13v10' tile

if (require("tibble") && require("sf")) { # required by `sf`

   tiles_to_sfc(y)  # requires `sf` package
   file <- system.file("shape/example.shp", package = "EOCubes")
   cub2 <- filter_tiles(cub1, geom = file)  # requires `sf` package
   list_tiles(cub2)
}

}
\seealso{
\code{\link{remote}}, \code{\link{cube}}
}
